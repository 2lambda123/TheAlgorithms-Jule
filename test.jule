use src::sort::{
	bubble_sort,
	selection_sort,
	simple_sort,
	shell_sort,
	quick_sort,
	insertion_sort,
	exchange_sort,
}

use src::strings:: {
	is_digit,
}

static mut TEST_COUNT: i64 = 0
static mut FAILED_COUNT: i64 = 0

fn expect(b: bool, algorithm: str) {
	TEST_COUNT++;
	if b {
		outln("TEST PASS: " + algorithm)
	} else {
		outln("TEST FAIL: " + algorithm + " algorithm not implemented correctly")
		FAILED_COUNT++
	}
}

fn test_sorts() {
	let unsorted = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]
	let sorted = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

	expect(bubble_sort(clone(unsorted)) == sorted, "bubble_sort")
	expect(selection_sort(clone(unsorted)) == sorted, "selection_sort")
	expect(simple_sort(clone(unsorted)) == sorted, "simple_sort")
	expect(shell_sort(clone(unsorted)) == sorted, "shell_sort")
	expect(quick_sort(clone(unsorted)) == sorted, "quick_sort")
	expect(insertion_sort(clone(unsorted)) == sorted, "insertion_sort")
	expect(exchange_sort(clone(unsorted)) == sorted, "exchange_sort")
}

fn test_strings() {
	expect(is_digit("12345") == true, "is_digit:1")
	expect(is_digit("foo") == false, "is_digit:2")
}

fn main() {
	test_sorts()
	test_strings()

	outln("=============================================")
	if FAILED_COUNT == 0 {
		out("All tests are passed successfully! [")
		out(TEST_COUNT)
		out("/")
		out(TEST_COUNT)
		outln("]")
	} else {
		out("Some tests are failed! [")
		out(TEST_COUNT - FAILED_COUNT)
		out("/")
		out(TEST_COUNT)
		outln("]")
	}
}
