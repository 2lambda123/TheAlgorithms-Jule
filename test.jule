#build test

use std::testing::{T}

use math
use search
use sort
use string

//
// MATH
//

#test
fn test_math_abs(t: &T) {
    t.assert(math::abs(-12.2) == 12.2)
    t.assert(math::abs(-12) == 12)
    t.assert(math::abs(-0.35) == 0.35)
}

#test
fn test_math_fact(t: &T) {
    t.assert(math::fact(10) == 3628800)
}

#test
fn test_math_max(t: &T) {
    t.assert(math::max(0, -9024, 1, 894, -34) == 894)
}

#test
fn test_math_median(t: &T) {
    t.assert(math::median([2, 5, 2, 6, -4, -15, 1, -3]) == 1.5)
}

#test
fn test_math_min(t: &T) {
    t.assert(math::min(0, -9024, 1, 894, -34) == -9024)
}

#test
fn test_math_sum(t: &T) {
    t.assert(math::sum([-9, 0, 1, 99, 54, 12]) == 157)
}




//
// SEARCH
//

#test
fn test_search_binary(t: &T) {
    let s = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

    t.assert(search::binary_search(s, 90) == -1)
    t.assert(search::binary_search(s, -85) == 1)
    t.assert(search::binary_search(s, 89) == 7)
}

#test
fn test_search_linear(t: &T) {
    let s = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]

    t.assert(search::linear_search(s, 90) == -1)
    t.assert(search::linear_search(s, -85) == 6)
}




//
// SORT
//

#test
fn test_sort_bubble(t: &T) {
    let mut unsorted = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]
    let sorted = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

    t.assert(sort::bubble_sort(unsorted) == sorted)
}

#test
fn test_sort_exchange(t: &T) {
    let mut unsorted = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]
    let sorted = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

    t.assert(sort::exchange_sort(unsorted) == sorted)
}

#test
fn test_sort_insertion(t: &T) {
    let mut unsorted = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]
    let sorted = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

    t.assert(sort::insertion_sort(unsorted) == sorted)
}

#test
fn test_sort_quick(t: &T) {
    let mut unsorted = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]
    let sorted = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

    t.assert(sort::quick_sort(unsorted) == sorted)
}

#test
fn test_sort_selection(t: &T) {
    let mut unsorted = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]
    let sorted = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

    t.assert(sort::selection_sort(unsorted) == sorted)
}

#test
fn test_sort_shell(t: &T) {
    let mut unsorted = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]
    let sorted = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

    t.assert(sort::shell_sort(unsorted) == sorted)
}

#test
fn test_sort_simple(t: &T) {
    let mut unsorted = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]
    let sorted = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

    t.assert(sort::simple_sort(unsorted) == sorted)
}




//
// STRING
//

#test
fn test_string_capitalize(t: &T) {
    t.assert(string::capitalize("foo BAR") == "Foo bar")
}

#test
fn test_string_is_alpha(t: &T) {
    t.assert(string::is_alpha("foo") == true)
    t.assert(string::is_alpha("12345") == false)
}

#test
fn test_string_is_digit(t: &T) {
    t.assert(string::is_digit("12345") == true)
    t.assert(string::is_digit("foo") == false)
}

#test
fn test_string_lower_case(t: &T) {
    t.assert(string::lower_case("FOo") == "foo")
}

#test
fn test_string_reverse(t: &T) {
    t.assert(string::reverse("FooBar") == "raBooF")
}

#test
fn test_string_upper_case(t: &T) {
    t.assert(string::upper_case("foO") == "FOO")
}
