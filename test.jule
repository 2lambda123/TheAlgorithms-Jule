use src::sorting::{
	bubble_sort,
	selection_sort,
	simple_sort,
	shell_sort,
	quick_sort,
	insertion_sort,
	exchange_sort,
}

fn expect(b: bool, algorithm: str) {
	if b {
		outln("TEST PASS: " + algorithm)
	} else {
		panic("TEST FAIL: " + algorithm + " algorithm not implemented correctly")
	}
}

fn test_sorts() {
	let unsorted = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]
	let sorted = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

	expect(bubble_sort(clone(unsorted)) == sorted, "bubble_sort")
	expect(selection_sort(clone(unsorted)) == sorted, "selection_sort")
	expect(simple_sort(clone(unsorted)) == sorted, "simple_sort")
	expect(shell_sort(clone(unsorted)) == sorted, "shell_sort")
	expect(quick_sort(clone(unsorted)) == sorted, "quick_sort")
	expect(insertion_sort(clone(unsorted)) == sorted, "insertion_sort")
	expect(exchange_sort(clone(unsorted)) == sorted, "exchange_sort")
}

fn main() {
	test_sorts()
}