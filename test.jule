use std::process::{exit}

use src::search::{
	linear_search,
}
use src::sort::{
	bubble_sort,
	selection_sort,
	simple_sort,
	shell_sort,
	quick_sort,
	insertion_sort,
	exchange_sort,
}
use src::string::{
	is_alpha,
	is_digit,
}

static mut TESTS: TestStack = TestStack.new()

fn add_tests_sort() {
	let unsorted = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]
	let sorted = [-9835, -85, -0, 0, 9, 35, 64, 89, 98, 8935]

	TESTS.add("bubble_sort", fn(): bool {
		ret bubble_sort(clone(unsorted)) == sorted
	})

	TESTS.add("selection_sort", fn(): bool {
		ret selection_sort(clone(unsorted)) == sorted
	})

	TESTS.add("simple_sort", fn(): bool {
		ret simple_sort(clone(unsorted)) == sorted
	})

	TESTS.add("shell_sort", fn(): bool {
		ret shell_sort(clone(unsorted)) == sorted
	})

	TESTS.add("quick_sort", fn(): bool {
		ret quick_sort(clone(unsorted)) == sorted
	})

	TESTS.add("insertion_sort", fn(): bool {
		ret insertion_sort(clone(unsorted)) == sorted
	})

	TESTS.add("exchange_sort", fn(): bool {
		ret exchange_sort(clone(unsorted)) == sorted
	})
}

fn add_tests_search() {
	let s = [9, 35, -0, 0, 98, 8935, -85, -9835, 64, 89]

	TESTS.add("linear_search:1", fn(): bool {
		ret linear_search(s, 90) == -1
	})

	TESTS.add("linear_search:2", fn(): bool {
		ret linear_search(s, -85) == 6
	})
}

fn add_tests_string() {
	TESTS.add("is_digit:1", fn(): bool {
		ret is_digit("12345") == true
	})

	TESTS.add("is_digit:2", fn(): bool {
		ret is_digit("foo") == false
	})

	TESTS.add("is_alpha:1", fn(): bool {
		ret is_alpha("foo") == true
	})

	TESTS.add("is_alpha:2", fn(): bool {
		ret is_alpha("12345") == false
	})
}

fn main() {
	add_tests_sort()
	add_tests_search()
	add_tests_string()

	let ok = TESTS.do()

	outln("=============================================")
	if ok {
		out("All tests are passed successfully! [")
		out(TESTS.count())
		out("/")
		out(TESTS.count())
		outln("]")
	} else {
		out("Some tests are failed! [")
		out(TESTS.count() - TESTS.fails())
		out("/")
		out(TESTS.count())
		outln("]")
		exit(1) // Fail exit
	}
}
