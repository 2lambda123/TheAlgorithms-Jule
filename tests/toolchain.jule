// Source codes of testing algorithms of this repository.

use std::process::{exit}

type Tester: fn(): bool

pub struct Test {
	ident: str
	tester: fn(): bool
}

// Statics.
impl Test {
	pub static fn new(ident: str, tester: Tester): Test {
		ret Test{
			ident: ident,
			tester: tester,
		}
	}
}

impl Test {
	pub fn test(self): bool {
		ret self.tester()
	}
}

pub struct TestStack {
	tests: []Test
	failed: int
}

// Statics
impl TestStack {
	pub static fn new(): TestStack {
		ret TestStack{}
	}
}

impl TestStack {
	pub fn add(mut self, ident: str, tester: Tester) {
		self.tests = append(self.tests, Test.new(ident, tester))
	}

	pub fn count(self): int { ret self.tests.len }

	pub fn fails(self): int { ret self.failed }

	pub fn do(mut self) {
		for _, t in self.tests {
			if t.test() {
				outln("[âœ“] " + t.ident + ": passed")
			} else {
				outln("[X] " + t.ident + ": algorithm not implemented correctly")
				self.failed++
			}
		}
		
		outln("=============================================")
		if self.failed == 0 {
			out("All tests are passed successfully! [")
			out(self.count())
			out("/")
			out(self.count())
			outln("]")
		} else {
			out("Some tests are failed! [")
			out(self.count() - self.fails())
			out("/")
			out(self.count())
			outln("]")
			exit(1) // Fail exit
		}
	}
}
