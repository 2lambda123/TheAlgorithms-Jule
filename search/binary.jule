// Search for target within a sorted array by repeatedly dividing the array in half and comparing the midpoint with the target.
// This function uses recursive call to itself.
// If a target is found, the index of the target is returned. Else the function throws exceptional with Error.NotFound.
fn Binary(array: []int, target: int, lowIndex: int, highIndex: int)!: int {
	if highIndex < lowIndex || len(array) == 0 {
		error(Error.NotFound)
	}
	mid := int(lowIndex + (highIndex-lowIndex)/2)
	if array[mid] > target {
		ret Binary(array, target, lowIndex, mid-1) else { error(error) }
	} else if array[mid] < target {
		ret Binary(array, target, mid+1, highIndex) else { error(error) }
	} else {
		ret mid
	}
}

// Search for target within a sorted array by repeatedly dividing the array in half and comparing the midpoint with the target.
// Unlike Binary, this function uses iterative method and not recursive.
// If a target is found, the index of the target is returned. Else the function throws exceptional with Error.NotFound.
fn BinaryIterative(array: []int, target: int)!: int {
	mut startIndex := 0
	mut endIndex := len(array) - 1
	mut mid := 0
	for startIndex <= endIndex {
		mid = int(startIndex + (endIndex-startIndex)/2)
		if array[mid] > target {
			endIndex = mid - 1
		} else if array[mid] < target {
			startIndex = mid + 1
		} else {
			ret mid
		}
	}
	error(Error.NotFound)
}

// Returns index to the first element in the range [0, len(array)-1] that is not less than (i.e. greater or equal to) target.
// Throws exceptional with Error.NotFound if no such element is found.
fn LowerBound(array: []int, target: int)!: int {
	mut startIndex := 0
	mut endIndex := len(array) - 1
	mut mid := 0
	for startIndex <= endIndex {
		mid = int(startIndex + (endIndex-startIndex)/2)
		if array[mid] < target {
			startIndex = mid + 1
		} else {
			endIndex = mid - 1
		}
	}

	// when target greater than every element in array, startIndex will out of bounds
	if startIndex >= len(array) {
		error(Error.NotFound)
	}
	ret startIndex
}

// Returns index to the first element in the range [lowIndex, len(array)-1] that is greater than target.
// Throws exceptional with Error.NotFound if no such element is found.
fn UpperBound(array: []int, target: int)!: int {
	mut startIndex := 0
	mut endIndex := len(array) - 1
	mut mid := 0
	for startIndex <= endIndex {
		mid = int(startIndex + (endIndex-startIndex)/2)
		if array[mid] > target {
			endIndex = mid - 1
		} else {
			startIndex = mid + 1
		}
	}

	// when target greater or equal than every element in array, startIndex will out of bounds
	if startIndex >= len(array) {
		error(Error.NotFound)
	}
	ret startIndex
}